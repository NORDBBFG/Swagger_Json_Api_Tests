// DonationApiClient.cs\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\nusing DonorApp.Services.DTO;\n\nnamespace DonorApp.Services.Api\n{\n    public class DonationApiClient\n    {\n        private readonly HttpClient _httpClient;\n        private readonly string _baseUrl;\n        private bool _simulateError;\n\n        public DonationApiClient(HttpClient httpClient, string baseUrl)\n        {\n            _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));\n            _baseUrl = baseUrl ?? throw new ArgumentNullException(nameof(baseUrl));\n        }\n\n        public void SimulateError(bool simulate)\n        {\n            _simulateError = simulate;\n        }\n\n        public async Task<ApiResponse<ContentResult>> ConfirmDonationAsync(DonationDto donation)\n        {\n            if (_simulateError)\n            {\n                return new ApiResponse<ContentResult>\n                {\n                    StatusCode = System.Net.HttpStatusCode.InternalServerError,\n                    Content = new ContentResult\n                    {\n                        Content = \"Simulated server error\",\n                        ContentType = \"application/json\",\n                        StatusCode = 500\n                    }\n                };\n            }\n\n            var response = await _httpClient.PutAsJsonAsync($\"{_baseUrl}/api/donation\", donation);\n\n            var content = await response.Content.ReadFromJsonAsync<ContentResult>();\n\n            return new ApiResponse<ContentResult>\n            {\n                StatusCode = response.StatusCode,\n                Content = content\n            };\n        }\n    \n        public class ApiResponse<T>\n        {\n            public System.Net.HttpStatusCode StatusCode { get; set; }\n            public T Content { get; set; }\n        }\n    }\n}