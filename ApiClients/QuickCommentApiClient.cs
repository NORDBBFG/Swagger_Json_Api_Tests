using System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing DonorApp.Models;\n\nnamespace DonorApp.ApiClients\n{\n    public class QuickCommentApiClient\n    {\n        private readonly HttpClient _httpClient;\n        private readonly string _baseUrl;\n        private bool _simulateError;\n\n        public QuickCommentApiClient(HttpClient httpClient, string baseUrl)\n        {\n            _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));\n            _baseUrl = baseUrl ?? throw new ArgumentNullException(nameof(baseUrl));\n        }\n\n        public void SimulateError(bool simulate)\n        {\n            _simulateError = simulate;\n        }\n\n        public async Task<ApiResponse<List<QuickCommentDto>>> GetQuickCommentsAsync(QuickCommentCategory category)\n        {\n            if (_simulateError)\n            {\n                return new ApiResponse<List<QuickCommentDto>>\n                {\n                    StatusCode = System.Net.HttpStatusCode.InternalServerError,\n                    Error = new ContentResult\n                    {\n                        Content = \"Simulated server error\",\n                        ContentType = \"application/json\",\n                        StatusCode = 500\n                    }\n                };\n            }\n\n            var url = $\"{_baseUrl}/api/v1/QuickComments?quickCommentCategory={(int)category}\";\n            var response = await _httpClient.PostAsync(url, null);\n\n            if (response.IsSuccessStatusCode)\n            {\n                var content = await response.Content.ReadAsStringAsync();\n                var comments = JsonSerializer.Deserialize<List<QuickCommentDto>>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                return new ApiResponse<List<QuickCommentDto>>\n                {\n                    StatusCode = response.StatusCode,\n                    Data = comments\n                };\n            }\n            else\n            {\n                var errorContent = await response.Content.ReadAsStringAsync();\n                var errorResult = JsonSerializer.Deserialize<ContentResult>(errorContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                return new ApiResponse<List<QuickCommentDto>>\n                {\n                    StatusCode = response.StatusCode,\n                    Error = errorResult\n                };\n            }\n        }\n    }\n\n    public class ApiResponse<T>\n    {\n        public System.Net.HttpStatusCode StatusCode { get; set; }\n        public T Data { get; set; }\n        public ContentResult Error { get; set; }\n    }\n}