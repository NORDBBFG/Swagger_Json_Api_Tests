using System;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing DonorApp.Services.ApiClient;\nusing DonorApp.Services.DTO;\nusing NUnit.Framework;\n\nnamespace DonorApp.Tests\n{\n    [TestFixture]\n    public class DonationApiTests\n    {\n        private DonationApiClient _apiClient;\n        private const string BaseUrl = \"https://api.donorapp.com\";\n\n        [SetUp]\n        public void Setup()\n        {\n            var httpClient = new HttpClient();\n            _apiClient = new DonationApiClient(httpClient, BaseUrl);\n        }\n\n        [Test]\n        public async Task ConfirmDonation_SuccessfulRequest_ReturnsOk()\n        {\n            // Arrange\n            var donationDto = CreateSampleDonationDto();\n\n            // Act\n            var response = await _apiClient.ConfirmDonationAsync(donationDto);\n\n            // Assert\n            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);\n            Assert.IsNotNull(response.Content);\n            Assert.AreEqual(200, response.Content.StatusCode);\n            Assert.IsNotNull(response.Content.Content);\n        }\n\n        [Test]\n        public async Task ConfirmDonation_BadRequest_ReturnsBadRequest()\n        {\n            // Arrange\n            var donationDto = new DonationDto(); // Invalid DTO\n\n            // Act\n            var response = await _apiClient.ConfirmDonationAsync(donationDto);\n\n            // Assert\n            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode);\n            Assert.IsNotNull(response.Content);\n            Assert.AreEqual(400, response.Content.StatusCode);\n        }\n\n        [Test]\n        public async Task ConfirmDonation_ServerError_ReturnsInternalServerError()\n        {\n            // Arrange\n            var donationDto = CreateSampleDonationDto();\n            _apiClient.SimulateError(true);\n\n            // Act\n            var response = await _apiClient.ConfirmDonationAsync(donationDto);\n\n            // Assert\n            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode);\n            Assert.IsNotNull(response.Content);\n            Assert.AreEqual(500, response.Content.StatusCode);\n        }\n\n        private DonationDto CreateSampleDonationDto()\n        {\n            return new DonationDto\n            {\n                Id = Guid.NewGuid(),\n                UserId = \"user123\",\n                FirstName = \"John\",\n                LastName = \"Doe\",\n                Date = DateTime.UtcNow,\n                BloodType = \"A+\",\n                DonationTypeId = 1,\n                CityId = 1,\n                DonationCenterId = 1,\n                DonationStatus = DonationStatuses.Status1,\n                BloodVolume = 450,\n                HealthFeeling = HealthFeeling.Feeling1,\n                FeelingComment = \"Feeling good\",\n                Certificates = new List<CertificateDto>(),\n                ExperienceRate = 5,\n                Comment = \"Great experience\",\n                QuickComments = new List<QuickCommentDto>()\n            };\n        }\n    }\n}\n