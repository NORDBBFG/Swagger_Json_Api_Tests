using NUnit.Framework;using System;using System.Net;using System.Threading.Tasks;[TestFixture]public class DonationTests{private DonationApiClient _client;[SetUp]public void Setup(){_client = new DonationApiClient("http://api.example.com");}[Test]public async Task ConfirmDonation_SuccessfulRequest_ReturnsOk(){var donation = new DonationDto{Id = Guid.NewGuid(),UserId = "user123",FirstName = "John",LastName = "Doe",Date = DateTime.UtcNow,BloodType = "A+",DonationTypeId = 1,CityId = 1,DonationCenterId = 1,DonationStatus = DonationStatuses.Status1,BloodVolume = 450,HealthFeeling = HealthFeeling.Feeling1,FeelingComment = "Feeling good",ExperienceRate = 5,Comment = "Great experience"};var response = await _client.ConfirmDonationAsync(donation);Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);Assert.IsNotNull(response.Content);Assert.AreEqual(200, response.Content.StatusCode);}[Test]public async Task ConfirmDonation_BadRequest_ReturnsBadRequest(){var donation = new DonationDto(); // Invalid donation objectvar response = await _client.ConfirmDonationAsync(donation);Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode);Assert.IsNotNull(response.Content);Assert.AreEqual(400, response.Content.StatusCode);}[Test]public async Task ConfirmDonation_SimulatedError_ReturnsInternalServerError(){_client.SimulateError(true);var donation = new DonationDto{Id = Guid.NewGuid(),UserId = "user123",FirstName = "John",LastName = "Doe",Date = DateTime.UtcNow,BloodType = "A+",DonationTypeId = 1,CityId = 1,DonationCenterId = 1,DonationStatus = DonationStatuses.Status1,BloodVolume = 450,HealthFeeling = HealthFeeling.Feeling1,FeelingComment = "Feeling good",ExperienceRate = 5,Comment = "Great experience"};var response = await _client.ConfirmDonationAsync(donation);Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode);Assert.IsNotNull(response.Content);Assert.AreEqual(500, response.Content.StatusCode);_client.SimulateError(false);}}