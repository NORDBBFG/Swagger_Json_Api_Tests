// DonationTests.cs\nusing System;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing DonorApp.Services.Api;\nusing DonorApp.Services.DTO;\nusing NUnit.Framework;\n\nnamespace DonorApp.Tests\n{\n    [TestFixture]\n    public class DonationTests\n    {\n        private DonationApiClient _client;\n        private const string BaseUrl = \"https://api.example.com\";\n\n        [SetUp]\n        public void Setup()\n        {\n            var httpClient = new HttpClient();\n            _client = new DonationApiClient(httpClient, BaseUrl);\n        }\n\n        [Test]\n        public async Task ConfirmDonation_SuccessfulConfirmation_ReturnsOk()\n        {\n            // Arrange\n            var donation = new DonationDto\n            {\n                Id = 1,\n                Amount = 100.00m,\n                DonationDate = DateTime.Now,\n                DonorName = \"John Doe\"\n            };\n\n            // Act\n            var response = await _client.ConfirmDonationAsync(donation);\n\n            // Assert\n            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);\n            Assert.IsNotNull(response.Content);\n            Assert.AreEqual(\"Donation successfully confirmed.\", response.Content.Content);\n        }\n\n        [Test]\n        public async Task ConfirmDonation_BadRequest_ReturnsBadRequest()\n        {\n            // Arrange\n            var invalidDonation = new DonationDto(); // Invalid donation data\n\n            // Act\n            var response = await _client.ConfirmDonationAsync(invalidDonation);\n\n            // Assert\n            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode);\n            Assert.IsNotNull(response.Content);\n            Assert.That(response.Content.Content, Does.Contain(\"Bad request\"));\n        }\n\n        [Test]\n        public async Task ConfirmDonation_ServerError_ReturnsInternalServerError()\n        {\n            // Arrange\n            _client.SimulateError(true);\n            var donation = new DonationDto\n            {\n                Id = 1,\n                Amount = 100.00m,\n                DonationDate = DateTime.Now,\n                DonorName = \"John Doe\"\n            };\n\n            // Act\n            var response = await _client.ConfirmDonationAsync(donation);\n\n            // Assert\n            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode);\n            Assert.IsNotNull(response.Content);\n            Assert.That(response.Content.Content, Does.Contain(\"Simulated server error\"));\n        }\n    }\n}