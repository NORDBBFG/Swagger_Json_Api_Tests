using System;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\n\npublic class ApiResponse<T>\n{\n    public T Data { get; set; }\n    public bool IsSuccess { get; set; }\n    public string ErrorMessage { get; set; }\n}\n\npublic class DonationApiClient\n{\n    private readonly HttpClient _httpClient;\n    private readonly string _baseUrl;\n    private bool _simulateError;\n\n    public DonationApiClient(HttpClient httpClient, string baseUrl)\n    {\n        _httpClient = httpClient;\n        _baseUrl = baseUrl;\n    }\n\n    public void SimulateError(bool simulate)\n    {\n        _simulateError = simulate;\n    }\n\n    public async Task<ApiResponse<ContentResult>> ConfirmDonationAsync(DonationDto donation)\n    {\n        if (_simulateError)\n        {\n            return new ApiResponse<ContentResult>\n            {\n                IsSuccess = false,\n                ErrorMessage = \"Simulated error\"\n            };\n        }\n\n        try\n        {\n            var response = await _httpClient.PutAsJsonAsync($\"{_baseUrl}/api/v1/donation/confirm\", donation);\n            response.EnsureSuccessStatusCode();\n            var content = await response.Content.ReadFromJsonAsync<ContentResult>();\n\n            return new ApiResponse<ContentResult>\n            {\n                Data = content,\n                IsSuccess = true\n            };\n        }\n        catch (HttpRequestException e)\n        {\n            return new ApiResponse<ContentResult>\n            {\n                IsSuccess = false,\n                ErrorMessage = e.Message\n            };\n        }\n    }\n}