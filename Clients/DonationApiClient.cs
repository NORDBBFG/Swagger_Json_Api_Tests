using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\npublic class DonationApiClient\n{\n    private readonly HttpClient _httpClient;\n    private bool _simulateError;\n\n    public DonationApiClient(HttpClient httpClient)\n    {\n        _httpClient = httpClient;\n    }\n\n    public void SimulateError(bool simulateError)\n    {\n        _simulateError = simulateError;\n    }\n\n    public async Task<ApiResponse<ContentResult>> ConfirmDonationAsync(DonationDto donation)\n    {\n        if (_simulateError)\n        {\n            return new ApiResponse<ContentResult>\n            {\n                StatusCode = System.Net.HttpStatusCode.InternalServerError,\n                Data = new ContentResult { Content = \"Simulated error\", StatusCode = 500 }\n            };\n        }\n\n        var jsonContent = new StringContent(JsonSerializer.Serialize(donation), Encoding.UTF8, \"application/json\");\n        var response = await _httpClient.PutAsync(\"/api/v1/donation/confirm\", jsonContent);\n\n        var responseData = await response.Content.ReadAsStringAsync();\n        var result = JsonSerializer.Deserialize<ContentResult>(responseData);\n\n        return new ApiResponse<ContentResult>\n        {\n            StatusCode = response.StatusCode,\n            Data = result\n        };\n    }\n}\n\npublic class ApiResponse<T>\n{\n    public System.Net.HttpStatusCode StatusCode { get; set; }\n    public T Data { get; set; }\n}